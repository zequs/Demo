<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jee
     http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">

	<context:component-scan base-package="com.tiantian" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource2"/>
	</bean>
    
    <!-- 
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    
    <property name="jndiName">
      <value>java:comp/env/jdbc/zhidet</value>
    </property>
  </bean>
     -->
	<!-- 
	 <jee:jndi-lookup jndi-name="jdbc/mysql" id="dataSource"/>
	 -->
   
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
    </bean>
   <bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" 
             destroy-method="close" abstract="true"> 
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/> 
        <property name="poolSize" value="10" /> 
        <property name="minPoolSize" value="10"/> 
        <property name="maxPoolSize" value="30"/> 
        <property name="borrowConnectionTimeout" value="60"/> 
        <property name="reapTimeout" value="20"/> 
        <!-- 最大空闲时间 --> 
        <property name="maxIdleTime" value="60"/> 
        <property name="loginTimeout" value="60"/>
        <property name="logWriter" value="60"/>
        <property name="testQuery">
            <value>select 1</value>
        </property>
        
    </bean> 

    <bean id="dataSource" parent="abstractXADataSource">
    <!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitestone" />
        <property name="xaDataSourceClassName"
            value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc.url}</prop>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
            </props>
        </property>
    </bean>
    
    <bean id="dataSource2" parent="abstractXADataSource">
<!-- value只要两个数据源不同就行，随便取名 -->
        <property name="uniqueResourceName" value="mysql/sitesttwo" />
        <property name="xaDataSourceClassName"
            value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc.url2}</prop>
                <prop key="user">${jdbc.username2}</prop>
                <prop key="password">${jdbc.password2}</prop>
            </props>
        </property>
    </bean>
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close">
        <description>UserTransactionManager</description>
        <property name="forceShutdown"><value>true</value></property>
    </bean>
  
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>
	 
	<bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
         <property name="userTransaction" ref="atomikosUserTransaction"/>
         <property name="allowCustomIsolationLevels" value="true" /> 
    </bean>
    
	<tx:annotation-driven transaction-manager="jtaTransactionManager"/>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory"/>
		<!-- 消息转换器 -->
<!-- 		<property name="messageConverter" ref="emailMessageConverter"/> -->
	</bean>
	
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616"/>
	</bean>
	
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="targetConnectionFactory"/>
	</bean>
	
	<!--这个是队列目的地-->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue</value>
		</constructor-arg>
	</bean>
	<!--这个是sessionAwareQueue目的地-->
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>sessionAwareQueue</value>
		</constructor-arg>
	</bean>
	<!-- 用于测试消息监听适配器的队列目的地 -->
	<bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>adapterQueue</value>
		</constructor-arg>
	</bean>
	<!-- 用于测试消息回复的 -->
	<bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>responseQueue</value>
		</constructor-arg>
	</bean>
	<!-- 默认的消息回复队列 -->
	<bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>defaultResponseQueue</value>
		</constructor-arg>
	</bean>
	<!--这个是主题目的地-->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topic"/>
	</bean>
	<!-- 消息监听器 -->
	<bean id="consumerMessageListener" class="com.tiantian.springintejms.listener.ConsumerMessageListener">
<!-- 		<property name="messageConverter" ref="emailMessageConverter"/> -->
	</bean>
	<!-- 可以获取session的MessageListener -->
	<bean id="consumerSessionAwareMessageListener" class="com.tiantian.springintejms.listener.ConsumerSessionAwareMessageListener">
		<property name="destination" ref="queueDestination"/>
	</bean>
	<!-- 消息监听适配器 -->
	<bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<!-- <constructor-arg>
			<bean class="com.tiantian.springintejms.listener.ConsumerListener"/>
		</constructor-arg> -->
		<property name="delegate">
			<bean class="com.tiantian.springintejms.listener.ConsumerListener"/>
		</property>
		<property name="defaultListenerMethod" value="receiveMessage"/>
		<property name="defaultResponseDestination" ref="defaultResponseQueue"/>
<!-- 		<property name="messageConverter" ref="emailMessageConverter"/> -->
<!-- 		<property name="messageConverter"> -->
<!-- 			<null/> -->
<!-- 		</property> -->
	</bean>
	<!-- responseQueue对应的监听器 -->
	<bean id="responseQueueListener" class="com.tiantian.springintejms.listener.ResponseQueueListener"/>
	<!-- defaultResponseQueue对应的监听器 -->
	<bean id="defaultResponseQueueListener" class="com.tiantian.springintejms.listener.DefaultResponseQueueListener"/>
	<!-- 消息监听适配器对应的监听容器 -->
	<bean id="messageListenerAdapterContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destination" ref="adapterQueue"/>
		<property name="messageListener" ref="messageListenerAdapter"/><!-- 使用MessageListenerAdapter来作为消息监听器 -->
		<property name="sessionTransacted" value="true"/>
	</bean>
	<!-- responseQueue对应的监听容器 -->
	<bean id="responseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destination" ref="responseQueue"/>
		<property name="messageListener" ref="responseQueueListener"/>
	</bean>
	<!-- defaultResponseQueue对应的监听容器 -->
	<bean id="defaultResponseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destination" ref="defaultResponseQueue"/>
		<property name="messageListener" ref="defaultResponseQueueListener"/>
	</bean>
<!-- 	<bean id="topicListener" class="com.tiantian.springintejms.service.TopicConsumer"/> -->
	<!-- 消息监听容器 -->
	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="consumerMessageListener" />
    	<property name="transactionManager" ref="jtaTransactionManager"/>
<!-- 	
		<property name="sessionTransacted" value="true"/>
	 -->
	</bean>
	
<!-- 	<bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/> -->
	
	<bean id="sessionAwareListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sessionAwareQueue" />
		<property name="messageListener" ref="consumerSessionAwareMessageListener" />
<!-- 		<property name="transactionManager" ref="jtaTransactionManager"/> -->
	</bean>
<!-- 	
	<bean id="jmsContainer2"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="messageListener" />
	</bean>
	
	<bean id="jmsContainer3"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="topicListener" />
	</bean>
	 -->
<!-- 	<bean id="consumerService" class="com.tiantian.springintejms.service.impl.ConsumerServiceImpl"/> -->

	<!-- 类型转换器 -->
	<bean id="emailMessageConverter" class="com.tiantian.springintejms.converter.EmailMessageConverter"/>
	<bean id="testDao2" class="com.tiantian.springintejms.dao.impl.TestDaoImpl2"/>

</beans>